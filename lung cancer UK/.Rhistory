marg_post <- as.data.frame(marg_post)
marg_post$type = "posterior"
marg_prior <- as.data.frame(marg_prior)
marg_prior$type = "prior"
dat <- rbind(marg_post, marg_prior)
ggplot() + geom_line(data = dat, aes(x = x, y = y, col = type), size = .8) + theme_bw() +
scale_y_continuous(limits = c(0, 30)) + scale_color_viridis_d(end = .8) +
ggtitle("Prior-posterior plot")
# posterior
marg_post <- inla.tmarginal(function(x) exp(-1/2*x), marginal =
lung_mod_ov$internal.marginals.hyperpar$`Log precision for ID`)
# prior
marg_prior <- inla.tmarginal(function(x) exp(-1/2*x),
data.frame(x= seq(from = 1, to = 1000, length.out = 1000),
y = inla.pc.dprec(seq(from = 1, to = 1000, length.out = 1000), 1, 0.01))
)
# prepare to plot
marg_post <- as.data.frame(marg_post)
marg_post$type = "posterior"
marg_prior <- as.data.frame(marg_prior)
marg_prior$type = "prior"
dat <- rbind(marg_post, marg_prior)
ggplot() + geom_line(data = dat, aes(x = x, y = y, col = type), size = .8) + theme_bw() +
scale_y_continuous(limits = c(0, 30)) + scale_color_viridis_d(end = .7) +
ggtitle("Prior-posterior plot")
W.nb <- poly2nb(lung)
nb2INLA("W.adj", W.nb)
# posterior
marg_post_prec <- inla.tmarginal(function(x) exp(-1/2*x), marginal =
lung_mod_bym$internal.marginals.hyperpar$`Log precision for ID`)
W.nb <- poly2nb(lung)
nb2INLA("W.adj", W.nb)
formula_bym <- cases ~ 1 + offset(logExpected) +
f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),  # Pr(sd<1) = 0.01, unlikely to have rr>3just based on the spatial confounding
theta2 = list("PCprior", c(0.5, 0.5))) # Pr(phi<0.5)=0.5, we state that we believe that the unmeasured spatial confounding
# is driven 50% from the strucutred and 50% from the unstructured random effect
)
lung_mod_bym <- inla(formula_bym, data = lung@data, family="poisson",
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
lung_mod_bym <- inla(formula_bym, data = lung, family="poisson",
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
lung_mod_ov$dic$dic; lung_mod_bym$dic$dic
# posterior
marg_post_prec <- inla.tmarginal(function(x) exp(-1/2*x), marginal =
lung_mod_bym$internal.marginals.hyperpar$`Log precision for ID`)
# prior
marg_prior_prec <- inla.tmarginal(function(x) exp(-1/2*x),
data.frame(x= seq(from = 1, to = 1000, length.out = 1000),
y = inla.pc.dprec(seq(from = 1, to = 1000, length.out = 1000), 1, 0.01))
)
# posterior
marg_post_prec <- inla.tmarginal(function(x) exp(-1/2*x), marginal =
lung_mod_bym$internal.marginals.hyperpar$`Log precision for ID`)
# prior
marg_prior_prec <- inla.tmarginal(function(x) exp(-1/2*x),
data.frame(x= seq(from = 1, to = 1000, length.out = 1000),
y = inla.pc.dprec(seq(from = 1, to = 1000, length.out = 1000), 1, 0.01))
)
# prepare to plot
marg_post_prec <- as.data.frame(marg_post_prec)
marg_post_prec$type = "posterior"
marg_prior_prec <- as.data.frame(marg_prior_prec)
marg_prior_prec$type = "prior"
dat <- rbind(marg_post_prec, marg_prior_prec)
# The mixing parameter
marg_post_mixing <- inla.tmarginal(function(x) exp(-1/2*x), lung_mod_bym$internal.marginals.hyperpar$`Log precision for ID`)
Q = INLA:::inla.pc.bym.Q("W.adj")
dim(Q);n <- 150
Q = INLA:::inla.scale.model(Q,  constr=list(A=matrix(1, 1, n), e=0))
phi.u = 0.5
phi.alpha = 0.5 ## prob(phi < phi.u) = phi.alpha
phis = 1/(1+exp(-seq(-8, 8,  len = 10000)))
phi.prior = INLA:::inla.pc.bym.phi(Q=Q, u= phi.u, alpha = phi.alpha)
phi.prior = INLA:::inla.pc.bym.phi(Q=Q, u= phi.u, alpha = phi.alpha)
m.r = inla.smarginal(lung_mod_bym$internal.marginals.hyperpar$`Logit phi for ID`, factor = 100, extrapolate = 0.5)
mm.r = inla.tmarginal(function(x)1/(1+exp(-x)), m.r)
plot(mm.r, type="l", lwd = 1,
xlim = c(0, 1),
ylim = c(0, 12),
xlab = expression(phi),
main = "Prior-posterior")
lines(phis, exp(phi.prior(phis)), lwd = 1,  lty=1, col = "blue")
grid()
mm.r
n
n
plot(mm.r, type="l", lwd = 1,
xlim = c(0, 1),
ylim = c(0, 12),
xlab = expression(phi),
main = "Prior-posterior")
# sd
marg_post_prec <- inla.tmarginal(function(x) exp(-1/2*x), marginal =
lung_mod_bym$internal.marginals.hyperpar$`Log precision for ID`)
# prior
marg_prior_prec <- inla.tmarginal(function(x) exp(-1/2*x),
data.frame(x= seq(from = 1, to = 1000, length.out = 1000),
y = inla.pc.dprec(seq(from = 1, to = 1000, length.out = 1000), 1, 0.01))
)
# prepare to plot
marg_post_prec <- as.data.frame(marg_post_prec)
marg_post_prec$type = "posterior"
marg_prior_prec <- as.data.frame(marg_prior_prec)
marg_prior_prec$type = "prior"
dat <- rbind(marg_post_prec, marg_prior_prec)
ggplot() + geom_line(data = dat, aes(x = x, y = y, col = type), size = .8) + theme_bw() +
scale_y_continuous(limits = c(0, 30)) + scale_color_viridis_d(end = .7) +
ggtitle("Prior-posterior plot") -> p1
p1
marg_post_mixing <- data.frame(x = mm.r$x, y = mm.r$y)
marg_prior_mixing <- data.frame(x = phis, y = exp(phi.prior(phis)))
dat_mix <-rbind(marg_post_mixing, marg_prior_mixing)
marg_post_mixing <- data.frame(x = mm.r$x, y = mm.r$y)
marg_post_mixing$type = "posterior"
marg_prior_mixing <- data.frame(x = phis, y = exp(phi.prior(phis)))
marg_prior_mixing$type = "prior"
dat_mix <-rbind(marg_post_mixing, marg_prior_mixing)
ggplot() + geom_line(data = dat_mix, aes(x = x, y = y, col = type), size = .8) + theme_bw() +
scale_color_viridis_d(end = .7) +
ggtitle("Prior-posterior plot for mix.") -> p2
p2
p1|p2
lung$spatialRR <- exp(lung_mod_bym$summary.random$ID$`0.5quant`[1:150])
tmap_mode("view")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="-RdBu") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
library(tmap)
tmap_mode("view")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="-RdBu") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="-plasma") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="-viridis") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="viridis") +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="viridis", max.categories = 5) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="viridis", breaks = c(0,0.5,1,1.5,2)) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
max(lung$spatialRR)
tmap_mode("view")
tm_shape(shp = lung) +
tm_fill(col = "spatialRR", alpha = .6, palette="viridis", breaks = c(0,0.5,1,1.5,2)) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
threshold <- log(1.5)
exceed.prob <- lapply(X= lung_mod_bym$marginals.random$ID[1:150], FUN = function(x) inla.pmarginal(marginal = x, threshold))
exceed.prob <- 1 - unlist(exceed.prob)
lung$exprob <- exceed.prob
tmap_mode("view")
tm_shape(shp = lung) +
tm_fill(col = "exprob", alpha = .6, palette="viridis", breaks = c(0, 0.2, 0.8, 1)) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Interactive Map of IG in England")
spplot(lung, "exprob", main = "Pr[RR>1.5]")
lung$exprob <- exceed.prob
tmap_mode("view")
tm_shape(shp = lung) +
tm_fill(col = "exprob", alpha = .6, palette="viridis", breaks = c(0, 0.2, 0.8, 1)) +
tm_borders(lty="solid", col="black") +
tm_style("natural") +
tm_layout(title="Exceedance probability of lung cancer in England")
ggplot() + geom_sf(data = lung, aes(fill = pctDeprived), col = NA) + scale_fill_viridis_c() + theme_bw()
formula_bym_cov <- cases ~ 1 + offset(logExpected) + pctDeprived +
f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),  # exactly as before
theta2 = list("PCprior", c(0.5, 0.5)))
)
lung_mod_bym_cov <- inla(formula_bym_cov, data = lung@data, family="poisson",
# priors for the fixed effects (not needed but here it is if needed)
control.fixed = list(mean=list(pctDeprived = 0),
prec = list(pctDeprived =.0001)),
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
formula_bym_cov <- cases ~ 1 + offset(logExpected) + pctDeprived +
f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),  # exactly as before
theta2 = list("PCprior", c(0.5, 0.5)))
)
lung_mod_bym_cov <- inla(formula_bym_cov, data = lung, family="poisson",
# priors for the fixed effects (not needed but here it is if needed)
control.fixed = list(mean=list(pctDeprived = 0),
prec = list(pctDeprived =.0001)),
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")])
round(exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")]), digits = 2)
exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")])
round(exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")]), digits = 3)
lung$pctDeprived
lung$ranef_unadj <- lung_mod_bym$summary.random$ID$`0.5quant`[1:150]
lung$ranef_adj <- lung_mod_bym_cov$summary.random$ID$`0.5quant`[1:150]
ggplot() + geom_sf(data = lung, aes(fill = ranef_unadj), col = NA) +
scale_fill_viridis_c() + theme_bw() -> p1
p1|p2
ggplot() + geom_sf(data = lung, aes(fill = ranef_adj), col = NA) +
scale_fill_viridis_c() + theme_bw() ->p2
p1|p2
sd_before <- 1/lung_mod_bym$summary.hyperpar$`0.5quant`[1]
# sd after adjusting for deprivation
sd_after <- 1/lung_mod_bym_cov$summary.hyperpar$`0.5quant`[1]
(sd_before -  sd_after)/sd_before
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, eval = TRUE, fig.align = "center")
kableExtra::kable(
round(exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")]), digits = 3)
)
kableExtra::kable(
round(exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")]),
digits = 3)  %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
)
kableExtra::kable(
round(exp(lung_mod_bym_cov$summary.fixed["pctDeprived",c("0.5quant", "0.025quant", "0.975quant")]),
digits = 3))  %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, eval = TRUE, fig.align = "center")
library(sf)
library(spdep)
library(tmap)
library(ggplot2)
library(patchwork)
library(kableExtra)
library(INLA)
load("caseproces.RData")
load("poppointproc.RData")
load("ZHshapefile.RData")
centroid.x <- c(681689, 696839, 700017)
centroid.y <- c(247620, 261850, 240222)
centroids <- data.frame(centroid.x = centroid.x, centroid.y = centroid.y)
radius <- 5000
n = 1000
pts = seq(0, 2 * pi, length.out = n)
ZH = cbind(centroid.x[1] + radius * sin(pts), centroid.y[1] + radius * cos(pts))
WH <- cbind(centroid.x[2] + radius * sin(pts), centroid.y[2] + radius * cos(pts))
GL <- cbind(centroid.x[3] + radius * sin(pts), centroid.y[3] + radius * cos(pts))
sl = SpatialPolygons(list(Polygons(list(Polygon(ZH)), 1), Polygons(list(Polygon(WH)), 2),
Polygons(list(Polygon(GL)), 3)))
crs(sl) <- CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
library(maptools)
crs(sl) <- CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
st_crs(sl) <- CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
library(raster)
crs(sl) <- CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
plot(mun2017)
plot(sl, border = "red", add=T, lwd = 2)
plot(mun2017)
plot(sl, border = "red", add=T, lwd = 2)
points(caseproces, cex = .2, pch = 19)
mun2017
mun2017 <- st_as_sf(mun2017)
ggplot() + geom_sf(data = mun2017, fill = NA)
sl
sl <- st_as_sf(sl)
ggplot() + geom_sf(data = mun2017, fill = NA) + geom_sf(data = sl, fill = NA)
ggplot() + geom_sf(data = mun2017, fill = NA) + geom_sf(data = sl, fill = NA, col = "red", size = 1)
caseproces
ggplot() + geom_sf(data = mun2017, fill = NA) +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y)) +
theme_bw()
ggplot() + geom_sf(data = mun2017, fill = NA) +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .5) +
theme_bw()
ggplot() + geom_sf(data = mun2017, fill = NA, col = "grey85") +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .7) +
theme_bw()
ggplot() + geom_sf(data = mun2017, fill = NA, col = "grey55") +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .7) +
theme_bw()
ggplot() + geom_sf(data = mun2017, fill = NA, col = "grey55") +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .7) +
theme_bw() + theme(
axis.text = element_blank()
)
ggplot() + geom_sf(data = mun2017, fill = NA, col = "grey55") +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .7) +
theme_bw() + theme(
axis.text = element_blank()
axis.title = element_blank()
ggplot() + geom_sf(data = mun2017, fill = NA, col = "grey55") +
geom_sf(data = sl, fill = NA, col = "red", size = 1) +
geom_point(data = caseproces, aes(x = x, y = y), size = .7) +
theme_bw() + theme(
axis.text = element_blank(),
axis.title = element_blank()
)
cantonZH <- st_union(mun2017)
plot(cantonZH)
mun2017
cantonZH
W <- as.owin(cantonZH)
mesh <- inla.mesh.create.helper(boundary = cantonZH,
cutoff=500, max.edge=c(1400, 10000), offset=c(.1,10000))
mesh <- inla.mesh.create.helper(boundary = as(cantonZH, "Spatial"),
cutoff=500, max.edge=c(1400, 10000), offset=c(.1,10000))
plot(mesh)
par(mar= c(0,0,0,0))
plot(mesh)
par(mar= c(0,0,0,0))
plot(mesh)
par(mar= c(0,0,.5,0))
plot(mesh)
par(mar= c(0,0,.7,0))
plot(mesh)
# load the function
source("VoronoiFun.R")
VoronoiTes <- inla.mesh.dual(mesh)
crs(VoronoiTes)
cantonZH@proj4string
st_crs(cantonZH)
crs(VoronoiTes) <- st_crs(cantonZH)
plot(VoronoiTes)
par(mar= c(0,0,0,0))
plot(VoronoiTes)
temp.spp <- SpatialPoints(coordinates(VoronoiTes), cantonZH@proj4string)
library(maptools)
library(spatstat)
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes), st_crs(cantonZH))
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes), CRS(cantonZH))
st_crs(cantonZH)
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes), crs("User input: +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs "))
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes), CRS("User input: +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs "))
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes), "User input: +proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs ")
proj4string(st_crs(canton))
CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
coordinates(VoronoiTes)
prjstr <- CRS("+proj=somerc +lat_0=46.95240555555556 +lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel +towgs84=674.374,15.056,405.346,0,0,0,0 +units=m +no_defs")
prjstr
# First I will define the polygons inside and outside the canton. We will use this to assign NA population density.
temp.spp <- SpatialPoints(coordinates(VoronoiTes),
proj4string = prjstr
)
temp.spp
temp.spp
temp.spp <- st_as_sf(temp.spp)
temp.spp
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH)
cantonZH
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(st_as_af(cantonZH))
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(st_as_sf(cantonZH))
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(st_as_sf(cantonZH)) ->mp
mp
View(mp)
cantonZH %>% st_as_sf %>% add_column(x=1)
library(dplyr)
cantonZH %>% st_as_sf %>% add_column(x=1)
library(tidyverse)
cantonZH %>% st_as_sf %>% add_column(x=1)
cantonZH %>% st_as_sf %>% add_column(ind=1)
cantonZH %>% st_as_sf %>% add_column(ind=1) ->
cantonZH
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH)
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(sapply(function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
}))
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(sapply(., function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
}))
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
}))
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(InOut = sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
}))
return(Y)
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(InOut = sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
return(Y)
}))
# Now count population per polygon
spat.points.temp <- SpatialPoints(poppointproc, proj4string = prjstr)
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(InOut = sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
return(Y)
})) %>% select(InOut)
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(InOut = sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
return(Y)
})) %>% slice.sf(InOut)
temp.spp %>%  st_as_sf(temp.spp) %>%
st_join(cantonZH) %>%
mutate(InOut = sapply(ind, function(X){
Y <- X
Y <- "In"
Y[is.na(X)] <- "Out"
return(Y)
})) -> temp.spp
VoronoiTes$InOut <- temp.spp$InOut
spat.points.temp %>% st_as_sf()
spat.points.temp %>% st_as_sf() %>%
st_join(VoronoiTes)->tmp
VoronoiTes
spat.points.temp %>% st_as_sf() %>%
st_join(st_as_sf(VoronoiTes)) ->tmp
temp.spp <- SpatialPoints(coordinates(VoronoiTes), cantonZH@proj4string)
temp.spp <- SpatialPoints(coordinates(VoronoiTes), prjstr)
ov_1 <- over(temp.spp, cantonZH)
temp.spp
cantonZH
ov_1 <- over(temp.spp, as(cantonZH, "Spatial"))
newdata <- data.frame(ID = 1:length(VoronoiTes@polygons))
row.names(newdata) <- newdata$ID
VoronoiTes <- SpatialPolygonsDataFrame(VoronoiTes, newdata)
VoronoiTes$InOut <- "In"
VoronoiTes$InOut[is.na(ov_1)] <- "Out"
spat.points.temp <- SpatialPoints(poppointproc, proj4string = prjstr)
over.tes <- over(spat.points.temp, VoronoiTes)
over.tes$x <-  spat.points.temp@coords[,1]
spat.points.temp
VoronoiTes
spat.points.temp <- SpatialPoints(poppointproc, proj4string = prjstr)
spat.points.temp
over.tes <- over(spat.points.temp, VoronoiTes)
poppointproc
crs(VoronoiTes) <- prjstr
spat.points.temp <- SpatialPoints(poppointproc, proj4string = prjstr)
over.tes <- over(spat.points.temp, VoronoiTes)
over.tes <- over(spat.points.temp, VoronoiTes)
over.tes$x <-  spat.points.temp@coords[,1]
over.tes$y <-  spat.points.temp@coords[,2]
over.tes$count <- 1
temp.ag <- aggregate(over.tes$count, by = list(ID = over.tes$ID), sum)
temp.merge <- merge(VoronoiTes, temp.ag, by.x= "ID", by.y = "ID")
temp.merge <- merge(VoronoiTes, temp.ag, by.x= "ID", by.y = "ID")
# everything flagged as out stays NA, everything in becomes 0
temp.merge$x[temp.merge$InOut %in% "In" & is.na(temp.merge$x)] <- 0
# and divide with the area to calculate the population density
temp.merge$dens <- temp.merge$x/unlist(lapply(temp.merge@polygons, function(X) slot(X, "area")))
temp.merge
spplot(temp.merge, "dens", col = "transparent", main = "Population density ZH")
temp.merge <- st_as_sf(temp.merge)
VoronoiTes
ggplot() + geom_sf(data = temp.merge, aes(fill = dens), col = NA) + scale_fill_viridis_c()
ggplot() + geom_sf(data = temp.merge, aes(fill = dens), col = NA) + scale_fill_viridis_c() + theme_bw()
spde <- inla.spde2.pcmatern(mesh=mesh, alpha=2,
prior.range=c(60000,0.5), # Pr(phi < 60000) = 0.5
prior.sigma=c(1,0.01) # Pr(sigma > 1) = 0.01
)
