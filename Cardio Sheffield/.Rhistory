dim(summary.random)
head(round(summary.random,3))
###################################################
### code chunk number 16: Practical5.Rnw:150-153
###################################################
#Hyperparameters
summary.hyper<- model.DM$summary.hyper
round(summary.hyper,3)
###################################################
### code chunk number 17: Practical5.Rnw:157-159
###################################################
marg.hyper <- inla.hyperpar.sample(100000,model.DM)
colnames(marg.hyper)
class(marg.hyper)
dim(marg.hyper)
###################################################
### code chunk number 18: Practical5.Rnw:164-166
###################################################
perc.var.u1 <- mean(marg.hyper[,1] / (marg.hyper[,1]+marg.hyper[,2]))
perc.var.u1
###################################################
### code chunk number 19: >
###################################################
#Natural scale
exp.uv <- lapply(model.DM$marginals.random$ID[1:1030], function(x)
inla.emarginal(exp,x))
exp.u <- lapply(model.DM$marginals.random$ID[1031:2060], function(x)
inla.emarginal(exp,x))
#Categories
cutoff=c(0.5,0.8,0.95,1.05,1.2,18.5)
exp.uv.cat <- cut(unlist(exp.uv),breaks=cutoff,include.lowest=TRUE)
exp.u.cat <- cut(unlist(exp.u),breaks=cutoff,include.lowest=TRUE)
###################################################
### code chunk number 20: Practical5.Rnw:197-208
###################################################
data.exp.BYM <- data.frame(SP_ID=stroke$SP_ID,
exp.u=exp.u.cat, exp.uv=exp.uv.cat)
row.names(data.exp.BYM) <- seq(1,1030)
head(data.exp.BYM)
#Merge exp(v), exp(v+u) and the sheffield shapefile
sheffield <- sheffield.gen
data.sheffield <- attr(sheffield, "data")
attr(sheffield, "data") <- merge(data.sheffield,
data.exp.BYM, by="SP_ID")
###################################################
### code chunk number 21: figMapBYM
###################################################
library(RColorBrewer)
spplot(obj=sheffield, zcol=c("exp.u","exp.uv"),
col.regions= brewer.pal(5, "BrBG"), main="")
###################################################
### code chunk number 22: Practical5.Rnw:232-236
###################################################
formula.hier <- y ~  f(ID,model="iid")
model.hier <- inla(formula.hier,family="binomial",
data=stroke, offset=offset, Ntrials=pop,
control.compute=list(dic=TRUE))
###################################################
### code chunk number 23: figHyper
###################################################
plot(inla.tmarginal(function(x) 1/x,
model.hier$marginals.hyper[[1]]), main="", type = "l", xlim = c(0.25,0.6),
ylim = c(0,12))
lines(inla.tmarginal(function(x) 1/x,
model.DM$marginals.hyper[[1]]),col="red")
###################################################
### code chunk number 24: Practical5.Rnw:257-260
###################################################
compareDIC=cbind(model.hier$dic[1:4],model.DM$dic[1:4])
colnames(compareDIC) = c("Hier", "DM")
compareDIC
###################################################
### code chunk number 25: Practical5.Rnw:279-286
###################################################
formula.reg <- y ~  f(ID,model="bym", graph=sheffield.adj,
hyper=list(prec.spatial=list(param=c(1,1)))) +
Townsend + NOx
model.reg <- inla(formula.reg,family="binomial",
data=stroke, offset=offset, Ntrials=pop,
control.compute=list(dic=TRUE),
control.fixed=list(prec=list(mean=0, prec=0.5)))
###################################################
### code chunk number 26: Practical5.Rnw:289-290
###################################################
round(model.reg$summary.fixed,3)
###################################################
### code chunk number 27: Practical5.Rnw:293-302
###################################################
names(model.reg$marginals.fixed)
log.Townsend <- model.reg$marginals.fixed[[2]]
log.NOx <- model.reg$marginals.fixed[[3]]
prob.Townsend <- 1-inla.pmarginal(0,log.Townsend)
prob.NOx <- 1-inla.pmarginal(0,log.NOx)
prob.Townsend
prob.NOx
###################################################
### code chunk number 28: Practical5.Rnw:307-327
###################################################
#Natural scale
exp.u.reg <- lapply(model.reg$marginals.random$ID[1031:2060],
function(x) inla.emarginal(exp,x))
#Categories
cutoff=c(0.5,0.8,0.95,1.05,1.2,18.5)
exp.u.reg.cat <- cut(unlist(exp.u.reg),breaks=cutoff,
include.lowest=TRUE)
data.exp.BYM <- data.frame(SP_ID=stroke$SP_ID,
exp.u=exp.u.cat, exp.u.reg=exp.u.reg.cat)
row.names(data.exp.BYM) <- seq(1,1030)
head(data.exp.BYM)
#Merge exp(u) for the two models with the sheffield shapefile
sheffield <- sheffield.gen
data.sheffield <- attr(sheffield, "data")
attr(sheffield, "data") <- merge(data.sheffield,data.exp.BYM,
by="SP_ID")
###################################################
### code chunk number 29: figMapEcreg
###################################################
spplot(obj=sheffield, zcol=c("exp.u","exp.u.reg"),
col.regions= brewer.pal(5, "BrBG"), main="")
###################################################
### code chunk number 30: Practical5.Rnw:346-349
###################################################
marg.hyper2 <- inla.hyperpar.sample(100000,model.reg)
perc.var.u2 <- mean(marg.hyper2[,1] /(marg.hyper2[,1]+marg.hyper2[,2]))
perc.var.u2
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, fig.align = "center")
library(maptools)
library(spdep)
library(INLA)
stroke <- read.csv("Stroke.csv")
head(stroke)
plot(stroke$stroke_exp)
table(stroke$Townsend.class)
table(stroke$NOx.class)
par(mar = c(0,0,0,0))
stroke <- read.csv("Stroke.csv", pch = 19, cex = 0.4)
par(mar = c(0,0,0,0))
stroke <- read.csv("Stroke.csv", pch = 19, cex = 0.4)
library(ggplot2)
ggplot() + geom_points(data = stroke, aes(y=stroke_exp)) + theme_bw()
ggplot() + geom_point(data = stroke, aes(y=stroke_exp)) + theme_bw()
stroke
stroke$index <- 1:nrow(stroke)
ggplot() + geom_point(data = stroke, aes(x = index, y = stroke_exp)) + theme_bw()
ggplot() + geom_point(data = stroke, aes(x = index, y = stroke_exp)) + theme_bw() + ylab("expected")
library(sf)
library(spdep)
library(ggplot2)
library(INLA)
sheffield.gen <- read_sf("Sheffield.shp")
plot(sheffield.gen)
plot(sheffield.gen$geometry)
par(mar = c(0,0,0,0))
plot(sheffield.gen$geometry)
nrow(stroke)
# define the neighbour structure
W.nb <- poly2nb(sheffield.gen)
nb2INLA("W.adj", W.nb)
# match
stroke<- stroke[match(sheffield.gen$SP_ID,stroke$SP_ID),]
#Check for the first 10 areas
stroke$SP_ID[1:10]
sheffield.gen$SP_ID[1:10]
# create an ID per spatial unit
stroke$ID<- seq(1,1030)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, eval = TRUE, fig.align = "center")
ggplot() + geom_sf(data = sheffield.gen)
ggplot() + geom_sf(data = sheffield.gen) + theme_bw()
ggplot() + geom_sf(data = sheffield.gen, fill = NA) + theme_bw()
formula <- y ~ 1 + f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),
# Pr(sd<1) = 0.01, unlikely to have rr>3just based on the spatial confounding
theta2 = list("PCprior", c(0.5, 0.5)))
# Pr(phi<0.5)=0.5, we state that we believe that the unmeasured spatial confounding
# is driven 50% from the strucutred and 50% from the unstructured random effect
)
strokes_DM <- inla(formula, data = stroke, family="binomial",  offset=Offset, Ntrials=pop,
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
strokes_DM$summary.hyperpar
sd <- inla.tmarginal(function(x) exp(-1/2*x), strokes_DM$internal.marginals.hyperpar$`Log precision for ID`)
plot(sd, type = "l", xlim = c(0, 1))
plot(strokes_DM$marginals.hyperpar$`Phi for ID`, type = "l")
sd
head(sd)
ggplot() + geom_line(data = sd, aes(x = x, y = y)) + theme_bw()
sd
sd_mar <- inla.tmarginal(function(x) exp(-1/2*x), strokes_DM$internal.marginals.hyperpar$`Log precision for ID`)
head(sd_mar)
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw()
sd_mar <- as.data.frame(inla.tmarginal(function(x) exp(-1/2*x), strokes_DM$internal.marginals.hyperpar$`Log precision for ID`))
head(sd_mar)
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw()
strokes_DM$marginals.hyperpar$`Phi for ID`
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() + ggtitle("Posterior of sd of the spatial field")
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`), aes(x = x, y = y)) +
theme_bw() + ggtitle("Posterior of sd of the mixing parameter")
p1|p2
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() + ggtitle("Posterior of sd of the spatial field") -> p1
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`), aes(x = x, y = y)) +
theme_bw() + ggtitle("Posterior of sd of the mixing parameter") -> p2
p1|p2
library(patchwork)
p1|p2
sheffield.gen$sp <- strokes_DM$summary.random$ID$`0.5quant`[1:1030]
threshold <- log(1)
exceed.prob <- lapply(X= strokes_DM$marginals.random$ID[1:1030], FUN = function(x) inla.pmarginal(marginal = x, threshold))
exceed.prob <- 1 - unlist(exceed.prob)
as.data.frame(exceed.prob)
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) + geom_hline(yintercept = 0.95, col = "red")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() +
theme(axis.x.text = element_blank()))
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() +
theme(axis.x.text = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() +
theme(axis.text.x = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(0,1))
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(0.25,0.5))
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(0.25,1))
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(0.25,0.5)) +
theme(axis.text.x = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(0,0.25)) +
theme(axis.text.x = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() +
theme(axis.text.x = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw()
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.5,0.5)) +
theme(axis.text.x = element_blank())
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
theme(axis.text.x = element_blank())
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
spplot(sheffield.gen, "ex", col = "transparent", col.regions = colorRampPalette(c('white', "seagreen"))(16)) + layer(sp.polygons(temp.ex, col="red", lwd = 2))
library(latticeExtra)
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
spplot(sheffield.gen, "ex", col = "transparent", col.regions = colorRampPalette(c('white', "seagreen"))(16)) + layer(sp.polygons(temp.ex, col="red", lwd = 2))
temp.ex
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red") + theme_bw()
sheffield.gen$ex
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c()
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw()
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() + ggtitle("Posterior of sd of the spatial field") -> p1
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`), aes(x = x, y = y)) +
theme_bw() + ggtitle("Posterior of sd of the mixing parameter") -> p2
p1|p2
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() + ggtitle("Posterior of sd of the spatial field") -> p1
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`), aes(x = x, y = y)) +
theme_bw() + ggtitle("Posterior of sd of the mixing parameter") -> p2
p1|p2
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
formula_2 <- y ~ 1 +  f(ID, model="iid", constr = TRUE, hyper = list(theta = list("PCprior", c(1, 0.01))))
strokes_DM_unstr <- inla(formula_2, data = stroke, family="binomial",  offset=Offset, Ntrials=pop,
control.compute = list(dic = TRUE, waic = TRUE), verbose = F)
strokes_DM$dic$dic; strokes_DM_unstr$dic$dic
# it seems that the models without a spatial component performs better.
ggplot() + geom_sf(data = sheffield.gen, aes(fill = NOx), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p1
ggplot() + geom_sf(data = sheffield.gen, aes(fill = depr), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p2
p1|p2
sheffield.gen <- read_sf("Sheffield.shp")
nrow(stroke)
sheffield.gen
# define the neighbour structure
W.nb <- poly2nb(sheffield.gen)
nb2INLA("W.adj", W.nb)
# match
stroke<- stroke[match(sheffield.gen$SP_ID,stroke$SP_ID),]
#Check for the first 10 areas
stroke$SP_ID[1:10]
sheffield.gen$SP_ID[1:10]
# create an ID per spatial unit
stroke$ID<- seq(1,1030)
stroke
stroke
head(stroke)
head(sheffield.gen)
library(sf)
library(spdep)
library(dplyr)
library(ggplot2)
library(patchwork)
library(INLA)
stroke <- left_join(stroke, sheffield.gen)
ggplot() + geom_sf(data = sheffield.gen, aes(fill = NOx), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p1
ggplot() + geom_sf(data = sheffield.gen, aes(fill = depr), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p2
p1|p2
stroke
stroke <- read.csv("Stroke.csv")
stroke$index <- 1:nrow(stroke)
head(stroke)
sheffield.gen <- read_sf("Sheffield.shp")
nrow(stroke)
stroke <- left_join(sheffield.gen, stroke)
ggplot() + geom_sf(data = sheffield.gen, aes(fill = NOx), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p1
ggplot() + geom_sf(data = sheffield.gen, aes(fill = depr), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p2
p1|p2
stroke
ggplot() + geom_sf(data = stroke, aes(fill = NOx), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p1
ggplot() + geom_sf(data = stroke, aes(fill = depr), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p2
p1|p2
head(stroke)
stroke <- read.csv("Stroke.csv")
stroke$index <- 1:nrow(stroke)
head(stroke)
sheffield.gen <- read_sf("Sheffield.shp")
nrow(stroke)
stroke <- left_join(sheffield.gen, stroke)
sheffield.gen <- read_sf("Sheffield.shp")
nrow(stroke)
stroke <- read.csv("Stroke.csv")
stroke$index <- 1:nrow(stroke)
head(stroke)
head(stroke)
head(sheffield.gen)
tmp <- left_join(sheffield.gen, stroke, by = c("SP_ID" = "SP_ID"))
tmp
stroke <- left_join(sheffield.gen, stroke, by = c("SP_ID" = "SP_ID"))
ggplot() + geom_sf(data = stroke, aes(fill = NOx), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p1
ggplot() + geom_sf(data = stroke, aes(fill = depr), col = NA) + scale_fill_viridis_d() +
theme_bw() -> p2
p1|p2
ggplot() + geom_sf(data = stroke, aes(fill = NOx), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p1
ggplot() + geom_sf(data = stroke, aes(fill = depr), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p2
p1|p2
ggplot() + geom_sf(data = stroke, aes(fill = Townsend.x), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p2
p1|p2
sheffield.gen
stroke <- read.csv("Stroke.csv")
stroke$index <- 1:nrow(stroke)
head(stroke)
sheffield.gen <- read_sf("Sheffield.shp")
nrow(stroke)
sheffield.gen
sheffield.gen <- sheffield.gen[,c(1:2)]
sheffield.gen
st_write(sheffield.gen, file = "Sheffield2.shp")
st_write(sheffield.gen, "Sheffield2.shp")
sheffield.gen <- read_sf("Sheffield2.shp")
sheffield.gen
sheffield.gen <- read_sf("Sheffield.shp")
stroke <- left_join(sheffield.gen, stroke, by = c("SP_ID" = "SP_ID"))
ggplot() + geom_sf(data = stroke, aes(fill = NOx), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p1
ggplot() + geom_sf(data = stroke, aes(fill = Townsend.x), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p2
p1|p2
ggplot() + geom_sf(data = stroke, aes(fill = Townsend), col = NA) + scale_fill_viridis_c() +
theme_bw() -> p2
p1|p2
exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.025quant", "0.5quant", "0.975quant")])
formula_eco <- y ~  1 + Townsend + NOx +
f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# hyper priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),
theta2 = list("PCprior", c(0.5, 0.5)))
)
model_eco <- inla(formula_eco, family="binomial", data=stroke, offset=Offset, Ntrials=pop, control.compute = list(dic = TRUE, waic = TRUE), control.fixed=list(prec=list(mean=0, prec=0.5)))
stroke <- read.csv("Stroke.csv")
stroke$index <- 1:nrow(stroke)
head(stroke)
sheffield.gen <- read_sf("Sheffield.shp")
# define the neighbour structure
W.nb <- poly2nb(sheffield.gen)
nb2INLA("W.adj", W.nb)
# match
stroke <- stroke[match(sheffield.gen$SP_ID,stroke$SP_ID),]
#Check for the first 10 areas
stroke$SP_ID[1:10]
sheffield.gen$SP_ID[1:10]
# create an ID per spatial unit
stroke$ID<- seq(1,1030)
formula_eco <- y ~  1 + Townsend + NOx +
f(ID, model="bym2", graph="W.adj", scale.model = TRUE, constr = TRUE,
# hyper priors
hyper = list(theta1 = list("PCprior", c(1, 0.01)),
theta2 = list("PCprior", c(0.5, 0.5)))
)
model_eco <- inla(formula_eco, family="binomial", data=stroke, offset=Offset, Ntrials=pop, control.compute = list(dic = TRUE, waic = TRUE), control.fixed=list(prec=list(mean=0, prec=0.5)))
exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.025quant", "0.5quant", "0.975quant")])
tab <- exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.5quant", "0.025quant", "0.975quant")])
tab
kableExtra::kable(tab)
tab <- exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.5quant", "0.025quant", "0.975quant")])
kableExtra::kable(tab)
library(kableExtra)
tab <- exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.5quant", "0.025quant", "0.975quant")])
kableExtra::kable(tab)
tab <- exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.5quant", "0.025quant", "0.975quant")])
kableExtra::kable(tab)
tab <- exp(model_eco$summary.fixed[c("Townsend", "NOx"),c("0.5quant", "0.025quant", "0.975quant")])
kableExtra::kable(tab)
tab <- round(tab, digits = 2)
plot(model_eco$marginals.hyperpar$`Phi for ID`, type = "l", main = "mixing parameter")
ggplot() + geom_line(data = as.data.frame(model_eco$marginals.hyperpar$`Phi for ID`), aes(x = x, y = y)) +
theme_bw() + ggtitle("Posterior of sd of the mixing parameter")
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() +
ggtitle("Posterior of sd of the spatial field") -> p1
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`),
aes(x = x, y = y)) + theme_bw() +
ggtitle("Posterior of sd of the mixing parameter") -> p2
p1|p2
ggplot() + geom_line(data = sd_mar, aes(x = x, y = y)) + theme_bw() +
ggtitle("Posterior of sd of the spatial field") -> p1
ggplot() + geom_line(data = as.data.frame(strokes_DM$marginals.hyperpar$`Phi for ID`),
aes(x = x, y = y)) + theme_bw() +
ggtitle("Posterior of sd of the mixing parameter") -> p2
p1|p2
ggplot() + geom_point(data = stroke, aes(x = index, y = stroke_exp), size = 0.5) +
theme_bw() + ylab("expected")
```{r fig.width = 5, fig.height = 3}
ggplot() + geom_point(data = stroke, aes(x = index, y = stroke_exp), size = 0.5) +
theme_bw() + ylab("expected")
table(stroke$Townsend.class)
table(stroke$NOx.class)
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
ggplot() + geom_boxplot(data=as.data.frame(exceed.prob), aes(y = exceed.prob)) +
geom_hline(yintercept = 0.95, col = "red") + theme_bw() + xlim(c(-0.6,0.6)) +
ylab("") +
theme(axis.text.x = element_blank()) -> p1
sheffield.gen$ex <- exceed.prob
temp.ex <-  sheffield.gen[sheffield.gen$ex >=0.95,]
ggplot() + geom_sf(data = sheffield.gen, aes(fill = ex), col = NA) + scale_fill_viridis_c() +
geom_sf(data = temp.ex, col = "red", fill = NA) + theme_bw() -> p2
(p1|p2) + plot_annotation(title = "Posterior probability")
